# -*- restclient -*-

:api = localhost:4000
:elasticsearch = localhost:9200/data-scores
:headers = <<
Content-Type: application/json
#


# Get the root path.
GET http://localhost:4000/api

# See all root methods.
OPTIONS http://localhost:4000/api/

# List all cities with units.
GET http://localhost:4000/api/cities

# List all councils with units.
GET http://localhost:4000/api/councils

# Show the details of Aberdeen (Aberdeenshire).
GET http://localhost:4000/api/cities/Aberdeenshire/Aberdeen

# List all documents.
POST http://localhost:4000/api/documents

# List all documents by ids.
POST http://localhost:4000/api/documents
Content-Type: application/json

{
  "ids": [
    "8067a46536a4b376c217b96fb2915b435d0ae97557a5957e3dc305fed4c19893",
    "711c3fbd648e21040dca0d91d6190ec06ddb01498a766bdbd6b777d71d04e8bc"
  ]
}

# Search for units
GET http://localhost:4000/api/search?q=computer&limit=5

# Show document details
GET http://localhost:4000/api/documents/bf9d309bede8d44850cd4498c892cb59a28da20f5b3c6d11585caad9851a2858


### Data Insights

# category insights
GET http://:api/insights/categories
:headers

# company insights
GET http://:api/insights/companies-systems
:headers

# authority insights
GET http://:api/insights/authorities
:headers

### Stats

# overview stats
GET http://:api/stats/documents
:headers

### Data insights ElasticSearch

# keyword query search
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "aggs": {
    "keywords": {
      "terms": {
        "size": 100,
        "field": "search_category.keyword"
      }
    }
  }
}

# keywords aggregation (using composite term buckets with pagination)
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "aggs": {
    "keywords": {
      "composite": {
        "size": 100,
        "sources": [
          {"categories": {"terms": {"field": "search_category.keyword"}}}
        ],
        "after": {"categories": "Rating equation"}
      }
    }
  }
}

# companies aggregation
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "aggs": {
    "companies": {
      "terms": {
        "size": 100,
        "field": "companies.keyword"
      }
    }
  }
}

# systems aggregation
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "aggs": {
    "systems": {
      "terms": {
        "size": 100,
        "field": "systems.keyword"
      }
    }
  }
}


# authorities aggregation
GET http://:elasticsearch/_search
:headers
{
  "_source": ["authorities"],
  "size": 1000,
  "query": {
    "bool": {
      "must": {
        "nested": {
          "path": "authorities",
          "query": {
            "bool": {
              "must": [
                {
                  "exists": {
                    "field": "authorities"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "aggs": {
    "authorities": {
      "nested": {
        "path": "authorities"
      },
      "aggs": {
        "name": {
          "terms": {
            "size": 1000,
            "field": "authorities.name.keyword"
          }
        }
      }
    }
  }
}

### Elasticsearch stats
# show document count
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "query": {
    "match_all": {}
  }
}

# show companies count
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "query": {
    "bool": {
      "should": [
        {
          "exists": {
            "field": "companies"
          }
        },
        {
          "exists": {
            "field": "systems"
          }
        }
      ]
    }
  }
}

# show authorities stats
GET http://:elasticsearch/_search
:headers
{
  "size": 0,
  "query": {
    "nested": {
      "path": "authorities",
      "query": {
        "bool": {
          "must": [{
            "exists": {
              "field": "authorities"
            }
          }]
        }
      }
    }
  }
}
